{"version":3,"sources":["components/Header.js","data/index.js","components/task-lane/Task.js","components/task-lane/Lane.js","components/task-lane/LaneList.js","components/Main.js","App.js","index.js"],"names":["Header","className","laneData","id","lanename","tasks","uuidv4","labelid","taskname","priority","LabelData","key","name","bgcolor","color","Task","index","task","draggableId","toString","provided","label","find","l","draggableProps","dragHandleProps","ref","innerRef","size","style","background","React","memo","Lane","lane","droppableId","droppableProps","map","placeholder","LaneList","lanes","setLanes","UpdatedLanes","result","destination","sourceid","parseInt","source","destionationid","destinationindex","sourceindex","copiedLanes","Array","from","sourceLane","splice","removed","copiedtasks","removedTask","onDragEnd","updated","Main","useState","App","app","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.db6088a4.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <div className=\"container-fluid\">\n        <h4>Kanban Board</h4>\n      </div>\n    </nav>\n  );\n};\n\nexport default Header;\n","import { v4 as uuidv4 } from \"uuid\";\n\nexport const laneData = [\n  {\n    id: 1,\n    lanename: \"Backlog\",\n    tasks: [\n      {\n        id: uuidv4(),\n        labelid: 1,\n        taskname: \"Misspelling on navbar\",\n        priority: 3,\n      },\n    ],\n  },\n  {\n    id: 2,\n    lanename: \"Open\",\n    tasks: [\n      {\n        id: uuidv4(),\n        labelid: 2,\n        taskname: \"Add hidden button in Mobile view\",\n        priority: 1,\n      },\n      {\n        id: uuidv4(),\n        labelid: 3,\n        taskname: \"Design Prototype for Blog Page\",\n        priority: 2,\n      },\n      {\n        id: uuidv4(),\n        labelid: 3,\n        taskname: \"Update Header\",\n        priority: 1,\n      },\n    ],\n  },\n  {\n    id: 3,\n    lanename: \"In Progress\",\n    tasks: [\n      {\n        id: uuidv4(),\n        labelid: 3,\n        taskname: \"Component Redesign\",\n        priority: 2,\n      },\n    ],\n  },\n  {\n    id: 4,\n    lanename: \"Done\",\n    tasks: [\n      {\n        id: uuidv4(),\n        labelid: 2,\n        taskname: \"Change Task Form Format\",\n        priority: 2,\n      },\n    ],\n  },\n];\n\nexport const LabelData = [\n  {\n    id: 1,\n    key: \"B\",\n    name: \"Bug\",\n    bgcolor: \"#E53935\",\n    color: \"#ffffff\",\n  },\n  {\n    id: 2,\n    key: \"S\",\n    name: \"Story\",\n    bgcolor: \"#7CB342\",\n    color: \"#ffffff\",\n  },\n  {\n    id: 3,\n    key: \"T\",\n    name: \"Task\",\n    bgcolor: \"#1E88E5\",\n    color: \"#ffffff\",\n  },\n];\n","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { LabelData } from \"../../data\";\nimport { FaCircle } from \"react-icons/fa\";\n\nconst Task = ({ index, task }) => {\n  return (\n    <>\n      <Draggable key={task.id} draggableId={task.id.toString()} index={index}>\n        {(provided) => {\n          const label = LabelData.find((l) => l?.id === task?.labelid);\n          return (\n            <div\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              ref={provided.innerRef}\n              className=\"taskcard\"\n            >\n              <div className=\"title d-flex align-items-center\">\n                <FaCircle className=\"me-1\" size=\"12\" color={label.bgcolor} />\n\n                {task.taskname}\n              </div>\n              <div\n                style={{ background: label.bgcolor, color: label.color }}\n                className=\"pill ml-3\"\n              >\n                {label.name}\n              </div>\n            </div>\n          );\n        }}\n      </Draggable>\n    </>\n  );\n};\n\nexport default React.memo(Task);\n","import React from \"react\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport Task from \"./Task\";\n\nconst Lane = ({ lane }) => {\n  return (\n    <>\n      <div className=\"lane \">\n        <h6 className=\"lane-title d-flex justify-content-center fw-bold\">\n          {lane.lanename}\n        </h6>\n        <Droppable droppableId={lane.id.toString()} key={lane.id}>\n          {(provided) => (\n            <div\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              className=\"lane-body\"\n            >\n              {lane.tasks.map((task, index) => (\n                <Task index={index} key={task.id} task={task} />\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </div>\n    </>\n  );\n};\n\nexport default Lane;\n","import React from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\n//importing components\nimport Lane from \"./Lane\";\n\nconst LaneList = ({ lanes, setLanes }) => {\n  const handleDragEnd = (result) => {\n    const updated = UpdatedLanes(result);\n    if (updated) {\n      setLanes(updated);\n    }\n  };\n\n  const UpdatedLanes = (result) => {\n    if (result && result.destination !== null) {\n      const sourceid = parseInt(result.source.droppableId);\n      const destionationid = parseInt(result.destination.droppableId);\n      const destinationindex = parseInt(result.destination.index);\n      const sourceindex = parseInt(result.source.index);\n      let copiedLanes = Array.from(lanes);\n      if (sourceid !== destionationid) {\n        let sourceLane = copiedLanes.find((lane) => lane.id === sourceid);\n        const [removed] = sourceLane.tasks.splice(sourceindex, 1);\n        return copiedLanes.map((lane) => {\n          if (lane.id === sourceid) {\n            return sourceLane;\n          } else if (lane.id === destionationid) {\n            let copiedtasks = Array.from(lane.tasks);\n            copiedtasks.splice(destinationindex, 0, removed);\n            return { ...lane, tasks: copiedtasks };\n          }\n          return lane;\n        });\n      } else {\n        return copiedLanes.map((lane) => {\n          if (lane.id === sourceid) {\n            let copiedtasks = Array.from(lane.tasks);\n            const [removedTask] = copiedtasks.splice(sourceindex, 1);\n            copiedtasks.splice(destinationindex, 0, removedTask);\n            return { ...lane, tasks: copiedtasks };\n          }\n          return lane;\n        });\n      }\n    }\n    return null;\n  };\n\n  return (\n    <>\n      <div className=\"lanecontainer\">\n        <DragDropContext onDragEnd={handleDragEnd}>\n          {lanes.map((lane) => (\n            <Lane setLanes={setLanes} key={lane.id} lane={lane} />\n          ))}\n        </DragDropContext>\n      </div>\n    </>\n  );\n};\n\nexport default LaneList;\n","import React, { useState } from \"react\";\nimport LaneList from \"./task-lane/LaneList\";\nimport { laneData } from \"../data\";\n\nconst Main = () => {\n  const [lanes, setLanes] = useState(laneData);\n\n  return (\n    <>\n      <LaneList setLanes={setLanes} lanes={lanes} />\n    </>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <>\n      <main className=\"wrapper\">\n        <Header />\n        <Main />\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import App from \"./App\";\nimport { createRoot } from \"react-dom/client\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nconst app = document.getElementById(\"app\");\n\n// create a root\nconst root = createRoot(app);\n\n//render app to root\nroot.render(<App />);\n"],"sourceRoot":""}